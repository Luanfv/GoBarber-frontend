{"ast":null,"code":"var _jsxFileName = \"/home/luanfv/projetos/GoBarber-frontend/src/components/Input/index.tsx\";\nimport React, { useEffect, useRef, useState, useCallback } from 'react';\nimport { Container } from './style';\nimport { useField } from '@unform/core';\n\nconst Input = ({\n  name,\n  icon: Icon,\n  ...rest\n}) => {\n  const inputRef = useRef(null);\n  const {\n    fieldName,\n    defaultValue,\n    error,\n    registerField\n  } = useField(name);\n  const [isFocused, setIsFocused] = useState(false);\n  const [isFilled, setIsFilled] = useState(false);\n  const handleInputFocus = useCallback(() => {\n    setIsFocused(true);\n  }, []);\n  const handleInputBlur = useCallback(() => {\n    var _inputRef$current;\n\n    setIsFocused(false);\n    setIsFilled(!!((_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.value));\n  }, []);\n  useEffect(() => {\n    registerField({\n      name: fieldName,\n      ref: inputRef.current,\n      path: 'value'\n    });\n  }, [fieldName, registerField]);\n  return /*#__PURE__*/React.createElement(Container, {\n    isFilled: isFilled,\n    isFocused: isFocused,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }\n  }, Icon && /*#__PURE__*/React.createElement(Icon, {\n    size: 20,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 23\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", Object.assign({\n    onFocus: handleInputFocus,\n    onBlur: handleInputBlur,\n    ref: inputRef,\n    defaultValue: defaultValue\n  }, rest, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }\n  })));\n};\n\nexport default Input;","map":{"version":3,"sources":["/home/luanfv/projetos/GoBarber-frontend/src/components/Input/index.tsx"],"names":["React","useEffect","useRef","useState","useCallback","Container","useField","Input","name","icon","Icon","rest","inputRef","fieldName","defaultValue","error","registerField","isFocused","setIsFocused","isFilled","setIsFilled","handleInputFocus","handleInputBlur","current","value","ref","path"],"mappings":";AAAA,OAAOA,KAAP,IAAqCC,SAArC,EAAgDC,MAAhD,EAAwDC,QAAxD,EAAkEC,WAAlE,QAAqF,OAArF;AAEA,SAASC,SAAT,QAA0B,SAA1B;AACA,SAASC,QAAT,QAAyB,cAAzB;;AAOA,MAAMC,KAA2B,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,IAAI,EAAEC,IAAd;AAAoB,KAAGC;AAAvB,CAAD,KAAmC;AACnE,QAAMC,QAAQ,GAAGV,MAAM,CAAmB,IAAnB,CAAvB;AACA,QAAM;AAAEW,IAAAA,SAAF;AAAaC,IAAAA,YAAb;AAA2BC,IAAAA,KAA3B;AAAkCC,IAAAA;AAAlC,MAAoDV,QAAQ,CAACE,IAAD,CAAlE;AACA,QAAM,CAACS,SAAD,EAAYC,YAAZ,IAA4Bf,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACgB,QAAD,EAAWC,WAAX,IAA0BjB,QAAQ,CAAC,KAAD,CAAxC;AAEA,QAAMkB,gBAAgB,GAAGjB,WAAW,CAAC,MAAM;AACvCc,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACH,GAFmC,EAEjC,EAFiC,CAApC;AAIA,QAAMI,eAAe,GAAGlB,WAAW,CAAC,MAAM;AAAA;;AACtCc,IAAAA,YAAY,CAAC,KAAD,CAAZ;AAEAE,IAAAA,WAAW,CAAC,CAAC,uBAACR,QAAQ,CAACW,OAAV,sDAAC,kBAAkBC,KAAnB,CAAF,CAAX;AACH,GAJkC,EAIhC,EAJgC,CAAnC;AAMAvB,EAAAA,SAAS,CAAC,MAAM;AACZe,IAAAA,aAAa,CAAC;AACVR,MAAAA,IAAI,EAAEK,SADI;AAEVY,MAAAA,GAAG,EAAEb,QAAQ,CAACW,OAFJ;AAGVG,MAAAA,IAAI,EAAE;AAHI,KAAD,CAAb;AAKH,GANQ,EAMN,CAACb,SAAD,EAAYG,aAAZ,CANM,CAAT;AAQA,sBACI,oBAAC,SAAD;AAAW,IAAA,QAAQ,EAAEG,QAArB;AAA+B,IAAA,SAAS,EAAEF,SAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACMP,IAAI,iBAAI,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAE,EAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADd,eAEI;AACI,IAAA,OAAO,EAAEW,gBADb;AAEI,IAAA,MAAM,EAAEC,eAFZ;AAGI,IAAA,GAAG,EAAEV,QAHT;AAII,IAAA,YAAY,EAAEE;AAJlB,KAKSH,IALT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAFJ,CADJ;AAYH,CApCD;;AAsCA,eAAeJ,KAAf","sourcesContent":["import React, { InputHTMLAttributes, useEffect, useRef, useState, useCallback } from 'react';\nimport { IconBaseProps } from 'react-icons';\nimport { Container } from './style';\nimport { useField } from '@unform/core';\n\ninterface InputProps extends InputHTMLAttributes<HTMLInputElement> {\n    name: string;\n    icon: React.ComponentType<IconBaseProps>;\n}\n\nconst Input: React.FC<InputProps> = ({ name, icon: Icon, ...rest }) => {\n    const inputRef = useRef<HTMLInputElement>(null);\n    const { fieldName, defaultValue, error, registerField } = useField(name);\n    const [isFocused, setIsFocused] = useState(false);\n    const [isFilled, setIsFilled] = useState(false);\n\n    const handleInputFocus = useCallback(() => {\n        setIsFocused(true);\n    }, [])\n\n    const handleInputBlur = useCallback(() => {\n        setIsFocused(false);\n\n        setIsFilled(!!inputRef.current?.value);\n    }, []);\n\n    useEffect(() => {\n        registerField({\n            name: fieldName,\n            ref: inputRef.current,\n            path: 'value',\n        });\n    }, [fieldName, registerField]);\n\n    return (\n        <Container isFilled={isFilled} isFocused={isFocused}>\n            { Icon && <Icon size={20} /> }\n            <input \n                onFocus={handleInputFocus}\n                onBlur={handleInputBlur}\n                ref={inputRef} \n                defaultValue={defaultValue} \n                { ...rest } \n            />\n        </Container>\n    );\n}\n\nexport default Input;"]},"metadata":{},"sourceType":"module"}